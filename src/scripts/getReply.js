const { getSchedule } = require("../database/getData");
const { deleteSchedule } = require("../database/deleteData");
const { validateUser, checkEventExist } = require("../businessLogic");
const { createClient } = require("../controllers/clients");
const {
  warningMessageCancel,
  warningMessageContact,
  warningMessageConfirm,
} = require("../controllers/warningMessage");
const {
  getClientEvent,
  deleteEvent,
  getAllEvents,
  confirmEvent,
} = require("../controllers/events");
const { formatLongDate } = require("../shared/formatters");
const {
  createSchedule,
  updateSchedule,
  cancelSchedule,
} = require("../controllers/shedule");
const { completeString } = require("../shared/completeString");
const { getEventsToday } = require("../shared/utils");

const getReply = async (user, client) => {
  const isValidUser = validateUser(user);
  let schedule = null;
  let reply = "";
  schedule = await getSchedule(user);
  await createClient(user);

  // Se j√° possuir evento agendado nos pr√≥ximos dias
  let eventExist = await checkEventExist(user);
  if (eventExist == true) {
    let clientEvent = await getClientEvent(user);
    let barberChatId = clientEvent.barberChatId;
    let date = clientEvent.date;
    switch (user.keyword) {
      case "10":
        warningMessageCancel(clientEvent, barberChatId, client, user);
        deleteEvent(clientEvent);
        reply = `Ok ${user.name}, vamos l√°!\nPrimeiro preciso que escolha um de nossos barbeiros!\n\n`;
        reply = await completeString(reply, "barbers");
        return reply;
      case "20":
        warningMessageCancel(clientEvent, barberChatId, client, user);
        deleteEvent(clientEvent);
        reply = `Pode deixar, j√° cancelamos!\nMas que pena üò•, assim que puder, entre em contato com a gente para refazer seu agendamento, at√© abreve! üëã `;
        return reply;
      case "00":
        warningMessageContact(clientEvent, barberChatId, client, user);
        reply = `Sua solicita√ß√£o foi encaminhada a um de nossos atendentes, logo logo retornaremos o contato!`;
        return reply;
    }
    reply = `Ol√° *${
      user.name
    }*, vi aqui que voc√™ possui um agendamento para a data *${formatLongDate(
      date
    )}* ü§î\nMe diga qual op√ß√£o melhor te atende nesse momento:\n\nüóìÔ∏è - *[10]* Preciso agendar outra data!\nü•≤ - *[20]* N√£o poderei comparecer!\n‚òéÔ∏è - *[00]* Preciso falar com um atendente!`;
    return reply;
  }

  // Se a mensagem recebida for "0" cancela o agendamento
  if (user.keyword === "0") {
    return cancelSchedule(user);
  }

  if (user.keyword === "00") {
    schedule = await getSchedule(user);
    let barberChatId = schedule.data.barber.data.chatId;
    warningMessageContact(undefined, barberChatId, client, user);
    reply = `Sua solicita√ß√£o foi encaminhada ao atendente selecionado, logo logo retornaremos o contato!`;
    cancelSchedule(user);
    return reply;
  }

  // Se ainda n√£o existir um "agendamento", cria-se um e solicita a sele√ß√£o de um "barbeiro"
  if (schedule === null) {
    createSchedule(user);
    reply = `Ol√° ${user.name}! Tudo certo?\nPara agendar um atendimento escolha um de nossos barbeiros!\n\n`;
    reply = await completeString(reply, "barbers");
    return reply;
  }

  // Se existir "agendamento" e ele ainda n√£o possuir "barbeiro", adiciona "barbeiro" selecionado anteriormente
  if (schedule !== null && schedule.data.barber === null) {
    await updateSchedule(user, "barber");
    schedule = await getSchedule(user);
    // Se ap√≥s a atualiza√ß√£o de "agendamento" ainda n√£o exista um "barbeiro" selecionado, solicita a sele√ß√£o novamente
    if (schedule.data.barber !== null) {
      reply = `${user.name}, para realizar o agendamento com o barbeiro ${schedule.data.barber.data.name} selecione uma das seguintes op√ß√µes:\n\n`;
      reply = await completeString(reply, "services");
      return reply;
    } else {
      reply = `‚ö†Ô∏è Op√ß√£o inv√°lida\nEscolha uma op√ß√£o v√°lida dentre nossos barbeiros!\n\n`;
      reply = await completeString(reply, "barbers");
      return reply;
    }
  }

  // Se "agendamento" existe e ainda n√£o possui "servi√ßo", adiciona "servi√ßo" selecionado anteriormente
  if (schedule !== null && schedule.data.service === null) {
    await updateSchedule(user, "service");
    schedule = await getSchedule(user);
    // Se ap√≥s a atualiza√ß√£o de "agendamento" ainda n√£o exista um "servi√ßo" selecionado, solicita a sele√ß√£o novamente
    if (schedule.data.service !== null) {
      reply = `Selecione o dia de prefr√™ncia:\n\n`;
      reply = await completeString(reply, "dayOfWeek");
      return reply;
    } else {
      reply = `‚ö†Ô∏è Op√ß√£o inv√°lida\nEscolha uma op√ß√£o v√°lida dentre nossos servi√ßos!\n\n`;
      reply = await completeString(reply, "services");
      return reply;
    }
  }

  // Se "agendamento" existe e ainda n√£o possui "dia da semana" selecionado, adiciona "dia da semana" selecionado anteriormente
  if (schedule !== null && schedule.data.date === null) {
    await updateSchedule(user, "dayOfWeek");
    schedule = await getSchedule(user);
    calendarId = schedule.data.barber.data.calendarId;
    // Se o "dia da semana" selecionado possuir hor√°rios dispon√≠veis, exibimos op√ß√µes de hor√°rios
    if (schedule.data.date !== null) {
      let calendarId = schedule.data.barber.data.calendarId;
      let eventsArr = await getAllEvents(calendarId);
      let selectedDay = schedule.data.date.dayOfWeek.dayOfMonth.toString();
      let eventsToday = getEventsToday(eventsArr, selectedDay);
      if (eventsToday.length > 0) {
        reply = `${user.name}, escolha um dos pr√≥ximos hor√°rios dispon√≠ves:\n\n`;
        reply = await completeString(reply, "hours", eventsToday);
        return reply;
      } else {
        await updateSchedule(user, "dayReset");
        reply = `‚ö†Ô∏è O dia selecionado n√£o possui hor√°rios dispon√≠veis, selecione um outro dia de prefer√™ncia:\n\n`;
        reply = await completeString(reply, "dayOfWeek");
        return reply;
      }
      // Se "dia da semana" n√£o possuir hor√°rios dispon√≠veis, removemos a op√ß√£o escolhida de "agendamentos" e solicitamos uma nova sele√ß√£o
    } else {
      reply = `‚ö†Ô∏è Op√ß√£o inv√°lida\nEscolha uma op√ß√£o v√°lida dentre nossos dias dispon√≠veis!\n\n`;
      reply = await completeString(reply, "dayOfWeek");
      return reply;
    }
  }

  //Se "date" ainda n√£o possuir "dados" sobre o dia selecionado, adiciona "dados" selecionado anteriormente
  if (schedule !== null && !schedule.data.date.hasOwnProperty("data")) {
    schedule = await getSchedule(user);
    calendarId = schedule.data.barber.data.calendarId;
    let eventsArr = await getAllEvents(calendarId);
    await updateSchedule(user, "date", eventsArr);
    schedule = await getSchedule(user);
    if (schedule.data.date.data !== undefined) {
      reply = `Para confirmar o agendamento de *${
        schedule.data.service.data.name
      }* com o barbeiro *${
        schedule.data.barber.data.name
      }*, \npara a data *${formatLongDate(
        schedule.data.date.data
      )}*, no valor de *R$ ${
        schedule.data.service.data.price
      }.*\nresponda com a op√ß√£o *[1]*!\n\n‚úÖ - *[1]* Confirmar agendamento\n\nüö´ - *[0]* Cancelar agendamento`;
      return reply;
    } else {
      reply = `‚ö†Ô∏è Op√ß√£o inv√°lida\nEscolha uma op√ß√£o v√°lida dentre nossos hor√°rios dispon√≠veis!\n\n`;
      let selectedDay = schedule.data.date.dayOfWeek.dayOfMonth.toString();
      let eventsToday = getEventsToday(eventsArr, selectedDay);
      reply = await completeString(reply, "hours", eventsToday);
      return reply;
    }
  }

  //Se todos os campos acima foram preenchidos corretamente, verificar se h√° confirma√ß√£o do agendamento e finaliza atendimento
  if (
    schedule !== null &&
    schedule.data.date !== null &&
    schedule.data.service !== null &&
    schedule.data.barber !== null
  ) {
    schedule = await getSchedule(user);

    if (user.keyword === "1") {
      warningMessageConfirm(schedule, client);
      deleteSchedule(user);
      confirmEvent(schedule);
      reply = `Tudo certo, s√≥ comparecer na data escolhida!`;
      return reply;
    } else {
      reply = `Por favor, selecione uma op√ß√£o v√°lida`;
      return reply;
    }
  }

  return false;
};

module.exports = {
  getReply,
};
